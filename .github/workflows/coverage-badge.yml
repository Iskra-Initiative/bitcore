name: Coverage Badge

on:
  push:
    branches: [ "main" ]  # only update badge for main branch
  workflow_run:
    workflows: ["Rust CI"]
    branches: [ "main" ]  # only when main branch CI completes
    types:
      - completed

jobs:
  coverage-badge:
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev socat bc

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path coverage.lcov
        cargo llvm-cov --all-features --workspace --test socat_tests -- --ignored || true

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(lcov --summary coverage.lcov 2>/dev/null | grep -o 'lines......: [0-9.]*%' | grep -o '[0-9.]*' || echo "0")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
        
        # determine color
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT

    - name: Create coverage badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GITHUB_TOKEN }}
        gistID: ${{ secrets.COVERAGE_GIST_ID }}
        filename: bitcore-coverage.json
        label: coverage
        message: ${{ steps.coverage.outputs.percentage }}%
        color: ${{ steps.coverage.outputs.color }}

    - name: Update coverage in README
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        COLOR=${{ steps.coverage.outputs.color }}
        
        # create badge markdown
        BADGE="[![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})](https://github.com/${{ github.repository }}/actions)"
        
        # update README if it exists and has a coverage placeholder
        if [ -f "README.md" ]; then
          # look for existing coverage badge and replace it
          if grep -q "!\[Coverage\]" README.md; then
            sed -i "s|!\[Coverage\]([^)]*)|$BADGE|g" README.md
            echo "Updated existing coverage badge in README.md"
          else
            echo "No coverage badge placeholder found in README.md"
            echo "Add this line to your README.md:"
            echo "$BADGE"
          fi
        fi

    - name: Commit updated README
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
        fi
